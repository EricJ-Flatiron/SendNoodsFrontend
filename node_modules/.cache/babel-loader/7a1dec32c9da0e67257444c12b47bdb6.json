{"ast":null,"code":"var _jsxFileName = \"/Users/ENJohnson/Development/code/Module5/SendNoods/frontend/src/components/CheckoutForm.js\";\n// import React, { Component } from \"react\";\n// import { CardElement, injectStripe } from \"react-stripe-elements\";\n// class CheckoutForm extends Component {\n//   state = {\n//     complete: false\n//   }\n//   submit = async () => {\n//     let {token} = await this.props.stripe.createToken({name: 'Test'});\n//     let response = await fetch('http://localhost:3001/payment', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type' : 'application/json',\n//         Authorization : `Bearer ${this.props.token}`\n//       },\n//       body: JSON.stringify({\n//         token: token.id,\n//         userId: this.props.userId\n//       })\n//     })\n//     if (response.ok) {\n//       this.setState({\n//         complete: true\n//       })\n//     }\n//   }\n//   render() {\n//     if (this.state.complete) return <h1>Purchase Complete</h1>\n//     return (\n//       <div>\n//         <p>Complete dis ish?</p>\n//         <CardElement/>\n//         <button onClick={this.submit}>Purchase</button>\n//       </div>\n//     )\n//   }\n// }\n// export default injectStripe(CheckoutForm);\nimport React from 'react';\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\nimport CardSection from './CardSection';\nexport default function CheckoutForm(props) {\n  const stripe = useStripe();\n  const elements = useElements(); // stripe.api_key = \"pk_test_51H9voND7h6J7ftZvWesW0Ak9dpg5Q6sKyjwG6KgHgkmToaqJQC7QcS25pr9PRGekpAwIgKIfliVBw71q4IsCApyw00KxLMKKCD\"\n\n  const handleSubmit = async event => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    let {\n      token\n    } = await stripe.createToken(elements.getElement(CardElement), {\n      name: 'Test'\n    });\n    let response = await fetch('http://localhost:3001/payment', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${props.token}`\n      },\n      body: JSON.stringify({\n        token: token.id,\n        userId: props.userId\n      })\n    }).then(res => res.json()).then(console.log);\n    const result = await stripe.confirmCardPayment(response.client_secret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: 'Jenny Rosen'\n        }\n      }\n    });\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {// Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: !stripe,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, \"Confirm order\"));\n}","map":{"version":3,"sources":["/Users/ENJohnson/Development/code/Module5/SendNoods/frontend/src/components/CheckoutForm.js"],"names":["React","useStripe","useElements","CardElement","CardSection","CheckoutForm","props","stripe","elements","handleSubmit","event","preventDefault","token","createToken","getElement","name","response","fetch","method","headers","Authorization","body","JSON","stringify","id","userId","then","res","json","console","log","result","confirmCardPayment","client_secret","payment_method","card","billing_details","error","message","paymentIntent","status"],"mappings":";AAAA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,EAAmBC,WAAnB,EAAgCC,WAAhC,QAAkD,yBAAlD;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC1C,QAAMC,MAAM,GAAGN,SAAS,EAAxB;AACA,QAAMO,QAAQ,GAAGN,WAAW,EAA5B,CAF0C,CAG1C;;AAEA,QAAMO,YAAY,GAAG,MAAOC,KAAP,IAAiB;AACpC;AACA;AACAA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAI,CAACJ,MAAD,IAAW,CAACC,QAAhB,EAA0B;AACxB;AACA;AACA;AACD;;AACD,QAAI;AAACI,MAAAA;AAAD,QAAU,MAAML,MAAM,CAACM,WAAP,CAAmBL,QAAQ,CAACM,UAAT,CAAoBX,WAApB,CAAnB,EAAqD;AAACY,MAAAA,IAAI,EAAE;AAAP,KAArD,CAApB;AACA,QAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAAD,EAAkC;AAC1DC,MAAAA,MAAM,EAAE,MADkD;AAE1DC,MAAAA,OAAO,EAAE;AACP,wBAAiB,kBADV;AAEPC,QAAAA,aAAa,EAAI,UAASd,KAAK,CAACM,KAAM;AAF/B,OAFiD;AAM1DS,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBX,QAAAA,KAAK,EAAEA,KAAK,CAACY,EADM;AAEnBC,QAAAA,MAAM,EAAEnB,KAAK,CAACmB;AAFK,OAAf;AANoD,KAAlC,CAAL,CAWpBC,IAXoB,CAWfC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAXQ,EAYpBF,IAZoB,CAYfG,OAAO,CAACC,GAZO,CAArB;AAaA,UAAMC,MAAM,GAAG,MAAMxB,MAAM,CAACyB,kBAAP,CAA2BhB,QAAQ,CAACiB,aAApC,EAAoD;AACvEC,MAAAA,cAAc,EAAE;AACdC,QAAAA,IAAI,EAAE3B,QAAQ,CAACM,UAAT,CAAoBX,WAApB,CADQ;AAEdiC,QAAAA,eAAe,EAAE;AACfrB,UAAAA,IAAI,EAAE;AADS;AAFH;AADuD,KAApD,CAArB;;AASA,QAAIgB,MAAM,CAACM,KAAX,EAAkB;AAChB;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACM,KAAP,CAAaC,OAAzB;AACD,KAHD,MAGO;AACL;AACA,UAAIP,MAAM,CAACQ,aAAP,CAAqBC,MAArB,KAAgC,WAApC,EAAiD,CAC/C;AACA;AACA;AACA;AACA;AACD;AACF;AACF,GA9CD;;AAgDA,sBACE;AAAM,IAAA,QAAQ,EAAE/B,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAQ,IAAA,QAAQ,EAAE,CAACF,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF,CADF;AAMD","sourcesContent":["// import React, { Component } from \"react\";\n// import { CardElement, injectStripe } from \"react-stripe-elements\";\n\n// class CheckoutForm extends Component {\n  \n//   state = {\n//     complete: false\n//   }\n\n//   submit = async () => {\n//     let {token} = await this.props.stripe.createToken({name: 'Test'});\n//     let response = await fetch('http://localhost:3001/payment', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type' : 'application/json',\n//         Authorization : `Bearer ${this.props.token}`\n//       },\n//       body: JSON.stringify({\n//         token: token.id,\n//         userId: this.props.userId\n//       })\n//     })\n\n//     if (response.ok) {\n//       this.setState({\n//         complete: true\n//       })\n//     }\n//   }\n\n//   render() {\n//     if (this.state.complete) return <h1>Purchase Complete</h1>\n\n//     return (\n//       <div>\n//         <p>Complete dis ish?</p>\n//         <CardElement/>\n//         <button onClick={this.submit}>Purchase</button>\n//       </div>\n//     )\n//   }\n// }\n// export default injectStripe(CheckoutForm);\n\nimport React from 'react';\nimport {useStripe, useElements, CardElement} from '@stripe/react-stripe-js';\n\nimport CardSection from './CardSection';\n\nexport default function CheckoutForm(props) {\n  const stripe = useStripe();\n  const elements = useElements();\n  // stripe.api_key = \"pk_test_51H9voND7h6J7ftZvWesW0Ak9dpg5Q6sKyjwG6KgHgkmToaqJQC7QcS25pr9PRGekpAwIgKIfliVBw71q4IsCApyw00KxLMKKCD\"\n\n  const handleSubmit = async (event) => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n    let {token} = await stripe.createToken(elements.getElement(CardElement), {name: 'Test'});\n    let response = await fetch('http://localhost:3001/payment', {\n      method: 'POST',\n      headers: {\n        'Content-Type' : 'application/json',\n        Authorization : `Bearer ${props.token}`\n      },\n      body: JSON.stringify({\n        token: token.id,\n        userId: props.userId\n      })\n    })\n    .then(res => res.json())\n    .then(console.log)\n    const result = await stripe.confirmCardPayment( response.client_secret , {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: 'Jenny Rosen',\n        },\n      }\n    });\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {\n        // Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n      }\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <CardSection />\n      <button disabled={!stripe}>Confirm order</button>\n    </form>\n  );\n}"]},"metadata":{},"sourceType":"module"}