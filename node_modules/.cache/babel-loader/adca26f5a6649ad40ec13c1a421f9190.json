{"ast":null,"code":"var _jsxFileName = \"/Users/ENJohnson/Development/code/Module5/SendNoods/frontend/src/components/CheckoutForm.js\";\n// import React, { Component } from \"react\";\n// import { CardElement, injectStripe } from \"react-stripe-elements\";\n// class CheckoutForm extends Component {\n//   state = {\n//     complete: false\n//   }\n//   submit = async () => {\n//     let {token} = await this.props.stripe.createToken({name: 'Test'});\n//     let response = await fetch('http://localhost:3001/payment', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type' : 'application/json',\n//         Authorization : `Bearer ${this.props.token}`\n//       },\n//       body: JSON.stringify({\n//         token: token.id,\n//         userId: this.props.userId\n//       })\n//     })\n//     if (response.ok) {\n//       this.setState({\n//         complete: true\n//       })\n//     }\n//   }\n//   render() {\n//     if (this.state.complete) return <h1>Purchase Complete</h1>\n//     return (\n//       <div>\n//         <p>Complete dis ish?</p>\n//         <CardElement/>\n//         <button onClick={this.submit}>Purchase</button>\n//       </div>\n//     )\n//   }\n// }\n// export default injectStripe(CheckoutForm);\nimport React from 'react';\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\nimport CardSection from './CardSection';\nexport default function CheckoutForm(props) {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async event => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    let {\n      token\n    } = await this.props.stripe.createToken({\n      name: 'Test'\n    });\n    let response = await fetch('http://localhost:3001/payment', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${props.token}`\n      },\n      body: JSON.stringify({\n        token: token.id,\n        userId: this.props.userId\n      })\n    });\n    const result = await stripe.confirmCardPayment(response, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: 'Jenny Rosen'\n        }\n      }\n    });\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {// Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: !stripe,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, \"Confirm order\"));\n}","map":{"version":3,"sources":["/Users/ENJohnson/Development/code/Module5/SendNoods/frontend/src/components/CheckoutForm.js"],"names":["React","useStripe","useElements","CardElement","CardSection","CheckoutForm","props","stripe","elements","handleSubmit","event","preventDefault","token","createToken","name","response","fetch","method","headers","Authorization","body","JSON","stringify","id","userId","result","confirmCardPayment","payment_method","card","getElement","billing_details","error","console","log","message","paymentIntent","status"],"mappings":";AAAA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,EAAmBC,WAAnB,EAAgCC,WAAhC,QAAkD,yBAAlD;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC1C,QAAMC,MAAM,GAAGN,SAAS,EAAxB;AACA,QAAMO,QAAQ,GAAGN,WAAW,EAA5B;;AAEA,QAAMO,YAAY,GAAG,MAAOC,KAAP,IAAiB;AACpC;AACA;AACAA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAI,CAACJ,MAAD,IAAW,CAACC,QAAhB,EAA0B;AACxB;AACA;AACA;AACD;;AACD,QAAI;AAACI,MAAAA;AAAD,QAAU,MAAM,KAAKN,KAAL,CAAWC,MAAX,CAAkBM,WAAlB,CAA8B;AAACC,MAAAA,IAAI,EAAE;AAAP,KAA9B,CAApB;AACA,QAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAAD,EAAkC;AAC1DC,MAAAA,MAAM,EAAE,MADkD;AAE1DC,MAAAA,OAAO,EAAE;AACP,wBAAiB,kBADV;AAEPC,QAAAA,aAAa,EAAI,UAASb,KAAK,CAACM,KAAM;AAF/B,OAFiD;AAM1DQ,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBV,QAAAA,KAAK,EAAEA,KAAK,CAACW,EADM;AAEnBC,QAAAA,MAAM,EAAE,KAAKlB,KAAL,CAAWkB;AAFA,OAAf;AANoD,KAAlC,CAA1B;AAWA,UAAMC,MAAM,GAAG,MAAMlB,MAAM,CAACmB,kBAAP,CAA0BX,QAA1B,EAAoC;AACvDY,MAAAA,cAAc,EAAE;AACdC,QAAAA,IAAI,EAAEpB,QAAQ,CAACqB,UAAT,CAAoB1B,WAApB,CADQ;AAEd2B,QAAAA,eAAe,EAAE;AACfhB,UAAAA,IAAI,EAAE;AADS;AAFH;AADuC,KAApC,CAArB;;AASA,QAAIW,MAAM,CAACM,KAAX,EAAkB;AAChB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYR,MAAM,CAACM,KAAP,CAAaG,OAAzB;AACD,KAHD,MAGO;AACL;AACA,UAAIT,MAAM,CAACU,aAAP,CAAqBC,MAArB,KAAgC,WAApC,EAAiD,CAC/C;AACA;AACA;AACA;AACA;AACD;AACF;AACF,GA5CD;;AA8CA,sBACE;AAAM,IAAA,QAAQ,EAAE3B,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAQ,IAAA,QAAQ,EAAE,CAACF,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF,CADF;AAMD","sourcesContent":["// import React, { Component } from \"react\";\n// import { CardElement, injectStripe } from \"react-stripe-elements\";\n\n// class CheckoutForm extends Component {\n  \n//   state = {\n//     complete: false\n//   }\n\n//   submit = async () => {\n//     let {token} = await this.props.stripe.createToken({name: 'Test'});\n//     let response = await fetch('http://localhost:3001/payment', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type' : 'application/json',\n//         Authorization : `Bearer ${this.props.token}`\n//       },\n//       body: JSON.stringify({\n//         token: token.id,\n//         userId: this.props.userId\n//       })\n//     })\n\n//     if (response.ok) {\n//       this.setState({\n//         complete: true\n//       })\n//     }\n//   }\n\n//   render() {\n//     if (this.state.complete) return <h1>Purchase Complete</h1>\n\n//     return (\n//       <div>\n//         <p>Complete dis ish?</p>\n//         <CardElement/>\n//         <button onClick={this.submit}>Purchase</button>\n//       </div>\n//     )\n//   }\n// }\n// export default injectStripe(CheckoutForm);\n\nimport React from 'react';\nimport {useStripe, useElements, CardElement} from '@stripe/react-stripe-js';\n\nimport CardSection from './CardSection';\n\nexport default function CheckoutForm(props) {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async (event) => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n    let {token} = await this.props.stripe.createToken({name: 'Test'});\n    let response = await fetch('http://localhost:3001/payment', {\n      method: 'POST',\n      headers: {\n        'Content-Type' : 'application/json',\n        Authorization : `Bearer ${props.token}`\n      },\n      body: JSON.stringify({\n        token: token.id,\n        userId: this.props.userId\n      })\n    })\n    const result = await stripe.confirmCardPayment(response, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: 'Jenny Rosen',\n        },\n      }\n    });\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {\n        // Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n      }\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <CardSection />\n      <button disabled={!stripe}>Confirm order</button>\n    </form>\n  );\n}"]},"metadata":{},"sourceType":"module"}