{"ast":null,"code":"var _jsxFileName = \"/Users/ENJohnson/Development/code/Module5/SendNoods/frontend/src/components/CheckoutForm.js\";\n// import React, { Component } from \"react\";\n// import { CardElement, injectStripe } from \"react-stripe-elements\";\n// class CheckoutForm extends Component {\n//   state = {\n//     complete: false\n//   }\n//   submit = async () => {\n//     let {token} = await this.props.stripe.createToken({name: 'Test'});\n//     let response = await fetch('http://localhost:3001/payment', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type' : 'application/json',\n//         Authorization : `Bearer ${this.props.token}`\n//       },\n//       body: JSON.stringify({\n//         token: token.id,\n//         userId: this.props.userId\n//       })\n//     })\n//     if (response.ok) {\n//       this.setState({\n//         complete: true\n//       })\n//     }\n//   }\n//   render() {\n//     if (this.state.complete) return <h1>Purchase Complete</h1>\n//     return (\n//       <div>\n//         <p>Complete dis ish?</p>\n//         <CardElement/>\n//         <button onClick={this.submit}>Purchase</button>\n//       </div>\n//     )\n//   }\n// }\n// export default injectStripe(CheckoutForm);\nimport React from 'react';\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\nimport CardSection from './CardSection';\nexport default function CheckoutForm() {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async event => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const result = await stripe.confirmCardPayment('{CLIENT_SECRET}', {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: 'Jenny Rosen'\n        }\n      }\n    });\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {// Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: !stripe,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, \"Confirm order\"));\n}","map":{"version":3,"sources":["/Users/ENJohnson/Development/code/Module5/SendNoods/frontend/src/components/CheckoutForm.js"],"names":["React","useStripe","useElements","CardElement","CardSection","CheckoutForm","stripe","elements","handleSubmit","event","preventDefault","result","confirmCardPayment","payment_method","card","getElement","billing_details","name","error","console","log","message","paymentIntent","status"],"mappings":";AAAA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,EAAmBC,WAAnB,EAAgCC,WAAhC,QAAkD,yBAAlD;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,eAAe,SAASC,YAAT,GAAwB;AACrC,QAAMC,MAAM,GAAGL,SAAS,EAAxB;AACA,QAAMM,QAAQ,GAAGL,WAAW,EAA5B;;AAEA,QAAMM,YAAY,GAAG,MAAOC,KAAP,IAAiB;AACpC;AACA;AACAA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAI,CAACJ,MAAD,IAAW,CAACC,QAAhB,EAA0B;AACxB;AACA;AACA;AACD;;AAED,UAAMI,MAAM,GAAG,MAAML,MAAM,CAACM,kBAAP,CAA0B,iBAA1B,EAA6C;AAChEC,MAAAA,cAAc,EAAE;AACdC,QAAAA,IAAI,EAAEP,QAAQ,CAACQ,UAAT,CAAoBZ,WAApB,CADQ;AAEda,QAAAA,eAAe,EAAE;AACfC,UAAAA,IAAI,EAAE;AADS;AAFH;AADgD,KAA7C,CAArB;;AASA,QAAIN,MAAM,CAACO,KAAX,EAAkB;AAChB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYT,MAAM,CAACO,KAAP,CAAaG,OAAzB;AACD,KAHD,MAGO;AACL;AACA,UAAIV,MAAM,CAACW,aAAP,CAAqBC,MAArB,KAAgC,WAApC,EAAiD,CAC/C;AACA;AACA;AACA;AACA;AACD;AACF;AACF,GAjCD;;AAmCA,sBACE;AAAM,IAAA,QAAQ,EAAEf,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAQ,IAAA,QAAQ,EAAE,CAACF,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF,CADF;AAMD","sourcesContent":["// import React, { Component } from \"react\";\n// import { CardElement, injectStripe } from \"react-stripe-elements\";\n\n// class CheckoutForm extends Component {\n  \n//   state = {\n//     complete: false\n//   }\n\n//   submit = async () => {\n//     let {token} = await this.props.stripe.createToken({name: 'Test'});\n//     let response = await fetch('http://localhost:3001/payment', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type' : 'application/json',\n//         Authorization : `Bearer ${this.props.token}`\n//       },\n//       body: JSON.stringify({\n//         token: token.id,\n//         userId: this.props.userId\n//       })\n//     })\n\n//     if (response.ok) {\n//       this.setState({\n//         complete: true\n//       })\n//     }\n//   }\n\n//   render() {\n//     if (this.state.complete) return <h1>Purchase Complete</h1>\n\n//     return (\n//       <div>\n//         <p>Complete dis ish?</p>\n//         <CardElement/>\n//         <button onClick={this.submit}>Purchase</button>\n//       </div>\n//     )\n//   }\n// }\n// export default injectStripe(CheckoutForm);\n\nimport React from 'react';\nimport {useStripe, useElements, CardElement} from '@stripe/react-stripe-js';\n\nimport CardSection from './CardSection';\n\nexport default function CheckoutForm() {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async (event) => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const result = await stripe.confirmCardPayment('{CLIENT_SECRET}', {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: 'Jenny Rosen',\n        },\n      }\n    });\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {\n        // Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n      }\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <CardSection />\n      <button disabled={!stripe}>Confirm order</button>\n    </form>\n  );\n}"]},"metadata":{},"sourceType":"module"}